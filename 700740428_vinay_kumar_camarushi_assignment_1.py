# -*- coding: utf-8 -*-
"""700740428_Vinay_Kumar_Camarushi_Assignment_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PkIKh6pucr1vyCiPo0VwucDreResYWos
"""

'''
Machine Learning (CS 5710)
Assignment - 1
Vinay Kumr Camarushi (700740428)
'''

"""Question 1"""

ages = [19, 22, 19, 24, 20, 25, 26, 24, 25, 24] # Taking the input as per given Question

#Sort the list and find the min and max age

sorted_ages = sorted(ages) # Sorting the array in ascending order

min_value = min(ages) # Finding the minimum value of the ages list
max_value = max(ages)  # Finding the minimum value of the ages list

print("Minimun Value of the ages is {}".format(min_value)) # printing the minimum value of the ages list
print("Maximum Value of the ages is {}".format(max_value)) # printing the maximum vlaue of the ages list

print("Sorted list in Ascending order is {}".format(sorted_ages)) # printing the sorted list of ages in ascending order
print("Sorted list in Descending order is {}".format(sorted_ages[::-1])) # printing the sorted list in descending order

#Add the min age and the max age again to the list

sorted_ages.append(min_value) # appending the minimum value to the ages list
sorted_ages.append(max_value) # appending the maximum value to the ages list

print(sorted_ages) # printing the ages list after adding the minimum and maximum values

#Find the median age (one middle item or two middle items divided by two)

def median(input_list): # defining a function to find the median of the given list
    sorted_list = sorted(input_list) # sorting the list in ascending order
    lenght_list = len(input_list) # getting the length of the ages list
    index = (lenght_list - 1) // 2 # Getting the middle index of the ages list

    # if there is only one element in the middle of the list then we will return that value or else we will take the average of the elements that are in the middle part of the array
    
    # checking if there are 2 elements or 1 element in the midle of the ages list
    if (lenght_list % 2):
        return sorted_list[index]  # returning the middle element form the list 
    # if there are 2 elements in the middle then we will average the values and return it
    else:
        
        return (sorted_list[index] + sorted_list[index + 1])/2.0 # returning the average of the middle elements  

median_ages = median(ages)  # Getting the median value to the variable median_ages

print("Median of the given list of ages is {}".format(median_ages)) # printing the median of the ages list

#Find the average age (sum of all items divided by their number)


average_ages = sum(ages)/len(ages) # dividing the sum of ages with length of ages to get the average of the ages 


print("Average of the given list of ages is {}".format(average_ages)) # printing the average of ages

#Find the range of the ages (max minus min)

range_ages = max_value - min_value # subtracting minimum value from the maximum value to get the range of the list 

print("Range of the given list of ages is {}".format(range_ages)) #printing the age of the list

"""Question 2

"""

#Create an empty dictionary called dog

dog = {} # creating an empty dictionary

#Add name, color, breed, legs, age to the dog dictionary

dog['name'] = 'Simba' # Adding name attribute to the dictionary and assigning value Simba
dog['color'] = 'Golden Yellow' #Adding color attribute to the dictionary and assigning value Golden yellow to it
dog['breed'] = 'Golden Retreiver' # Adding breed attribute to the dictionary and assigning Golden Retreiver
dog['legs'] = 4 # Adding legs attribute to the dictionary and assigning value 4 to it
dog['age'] = 10 # Adding age attribute to the Dictionary and  assigning value 10 to it

print(dog) # printing dog attribute

'''Create a student dictionary and add first_name, last_name, gender, age, marital status, 
skills, country, city and address as keys for the dictionary'''

# Creating and Initializing student Dictionary with given attributes
student = {"first_name": "Vinay",'last_name' : "Kumar","gender":"Male","age" : "23","marital status" : "Single","skills" : ["Python, Power BI, SQL, Data Analytics, Microsoft Azure"]
,"country" :"United States","city" : "Overland Park","address" : "6635 W 141st St APt 3607"}

print(student) # printing student dictionary

#Get the length of the student dictionary

len_dictionary = len(student) # getting the length of the student dictionary and storing it in the variable len_dictionary

print("The length of the Student dictionary is {}".format(len_dictionary)) # printing the lenght of the dictionary

#Get the value of skills and check the data type, it should be a list

values_of_Student = list(student.values()) # getting the values of the dictionary into the list values_of_Student

print("The datatype of the values of the Student dictionary is a {}".format(type(values_of_Student))) # printing the type of the values list

#Modify the skills values by adding one or two skills

student['skills'].extend(['Java','C Programming']) # Adding more skills to the skills key in the student dictionary

print(student) # printing the student dictionary

#Get the dictionary keys as a list

Dict_keys = list(student.keys()) # storing the dictionary keys in the Dict_keys variables

print(Dict_keys) # printing the Dict_keys variable which contains the keys from the student dictionary

#Get the dictionary values as a list

Dict_values = list(student.values()) # getting the values of the keys from the dictionary and storing it in the variable Dict_values

print(Dict_values) # printing the Dict_values which contains the values of the keys from the student Dictionary

"""Question 3"""

#Create a tuple containing names of your sisters and your brothers (imaginary siblings are fine)

brothers = ("Vara Prasad","Bhanu Chandra","Vinod Kumar") # creating the brothers tuple with some sample data
sisters = ("Bhavani", "Sravani","Vijaya Sri") # creating the sisters tuple with some sample data

print("The tuple of brothers is : {}".format(brothers)) # printing the brothers tuple 
print("The tuple of sisters is : {}".format(sisters)) # printing the sisters tuple

#Join brothers and sisters tuples and assign it to siblings

siblings = brothers + sisters # concatenating the brothers and sisters tuples into siblings

print("The tuple of siblings is : {}".format(siblings)) # printing the siblings tuple

# How many siblings do you have?

len_siblings = len(siblings) # getting the length of the siblings and storing the value in the variable len_siblings

print("The length of siblings is : {}".format(len_siblings)) # printing the length of the siblings tuple

#Modify the siblings tuple and add the name of your father and mother and assign it to family_members

family_members = siblings + ('Srinivasa Rao','Lakshmi') # Adding sample parents data to the siblings tuple and storing in the tuple family_members

print("The tuple of family members is : {}".format(family_members)) # printing the family_members tuple

"""Question 4"""

it_companies = {'Facebook', 'Google', 'Microsoft', 'Apple', 'IBM', 'Oracle', 'Amazon'} # initilizing the it_companies set with some companies
A = {19, 22, 24, 20, 25, 26} # initilizing the A set with some values
B = {19, 22, 20, 25, 26, 24, 28, 27} #initilizing the B set with some values
age = [22, 19, 24, 25, 26, 24, 25, 24] # initilizing the age list with some values

#Find the length of the set it_companies

len_it_companies = len(it_companies) # getting the length of the it_companies set

print("The length of the tuple 'it_companies' is : {}".format(len_it_companies)) # printing the length of the it_companies set

#Add 'Twitter' to it_companies

it_companies.add('Twitter') # adding 'Twitter' to the it_companies Set 

print('Tuple after appending Twitter is: {}'.format(it_companies)) # printing the it_companies set aftre adding Twitter

# Insert multiple IT companies at once to the set it_companies

it_companies.update(['Accenture','Cognizant']) # updating the it_companies set with the values Accenture and Cognizant

print('Tuple after appending multiple it companies is: {}'.format(it_companies)) # printing the set after the addition of new values

# Remove one of the companies from the set it_companies

it_companies.remove("Accenture") # Removing the company 'Accenture' from the set it_companies 

print('Tuple after removing one element is: {}'.format(it_companies)) # printing the it_companies set after removing Accenture

""" What is the difference between remove and discard ?

 Answer : Both of the methods do the same work (i.e.), removes the element from the set only if the element is present in the set. the only difference is remove() method throws an error/exception if the element is not present in the set which is supposed to be removed and the discard method does not throw the exception.
"""

#Join A and B

C = A | B # Joining the 2 sets A & B and storing the value in the set C

print("The union of the sets A & B is : {}".format(C)) # Printing the Set C which is the union of the sets A & B

#Find A intersection B

intersec_A_B = A.intersection(B) # finding the intersection of the 2 sets A & B and storing the value in the intersec_A_B variable

print("The intersection of the sets A & B is : {}".format(intersec_A_B)) # printing the variable intersec_A_B which is the intersection of the sets A & B

#Is A subset of B

A_is_subset_of_B = A.issubset(B) # checking if A is Subset of the set B and storing the boolean value in the variable 'A_is_subset_of_B'

print("Is A subset of B ? {}".format(A_is_subset_of_B)) # printing the boolean value

#Are A and B disjoint sets

#Since the sets A & B are having common elements both of them are not disjoint sets 
 
intersec_A_B = A.intersection(B) # checking if the sets A and B are having any common elements or not

# writing a logic such that if there are no common elements in both the sets disjoint sets will be printed or else the opposite will be printed
if(intersec_A_B == None):
  print("The sets A & B are Disjoint sets") # printing disjoint sets
else:
  print("The sets A & B are not Disjoint sets") # printing non disjoint sets

#Join A with B and B with A

A.update(B) # Joining set A with set B

B.update(A) # Joining set B with set A

print("The Set A after getting joined with B is {}".format(A)) # printing the Set A after getting joined with set B

print("The Set B after getting joined with A is {}".format(B)) # printing the Set B after getting joined with set A

# What is the symmetric difference between A and B

Sym_diff =  A.symmetric_difference(B) # checking the symmetric differences wih the symmetric_difference() method 

print("The Symmetric Difference between A & B is : {}".format(Sym_diff)) # printing the symmetric differences between the 2 sets A & B

# Delete the sets completely

del A  #deleting set A
del B # deleting set B

print(A) # printing set A to see if it is deleted or not

print(B) # printing Set B to see if it is deleted or not

# Convert the ages to a set and compare the length of the list and the set
len_list_age = len(age)

len_set_age = len(set(age))

if(len_list_age > len_set_age):
  print("List has more length when compared to the set")
elif(len_list_age < len_set_age):
  print("set has more length when compared to the list")
else:
  print("Both list and set are having same length")

"""Question 5 """

radius = 30 # initializing the radius variable with value 30 as per given input

# Calculate the area of a circle and assign the value to a variable name of _area_of_circle_

area_of_circle = 3.14 * radius ** 2 # calculating the area of the circle from the formula pi * r * r and storing it in the variable 'area_of_circle'

print("The area of the circle with radius {} is {}".format(radius,area_of_circle)) # printing the radius and area of the circle

# Calculate the circumference of a circle and assign the value to a variable name of _circum_of_circle_

circum_of_circle = 2 * 3.14 * radius # calculating the perimeter of the circle and storing the value in the variable 'circum_of_circle'

print("The circumference of the circle with radius {} is {}".format(radius,circum_of_circle)) # printing the radius and circumferenece of the circle

# Take radius as user input and calculate the area.
user_input_radius = float(input("Enter the radius of the circle : ")) # taking radius as the user input as a floating number

user_area_of_circle = 3.14 * user_input_radius ** 2 # calculating the area of the circle from the formula pi * r * r and storing it in the variable 'area_of_circle' 

print("The area of the circle with user input radius {} is {}".format(user_input_radius,user_area_of_circle)) # printing the radius and area of the circle

"""Question 6"""

# How many unique words have been used in the sentence? Use the split methods and set to get the unique words.

input_string = 'I am a teacher and I love to inspire and teach people' # initializing the string with given value 

words = input_string.split(' ') # splitting the given string at the space

unique_words = set(words) # converting th splitted list to the set to get the unique values of the list 

print("The unique words in the given input string is : {}".format(len(unique_words))) # printing the unique values of the string 'input_string'

"""Question 7

Use a tab escape sequence to get the following lines.
Name Age Country City 
Asabeneh 250 Finland Helsinki

"""

print("Name\t\t\t\tAge\t\t\t\tCountry\t\t\t\tCity\nAsabeneh\t\t\t250\t\t\t\tFinland\t\t\t\tHelsinki")

"""Question 8

"""

radius = 10 # initialising the radius of the circle with value 10 
area = 3.14 * radius ** 2 # Calculating the area of the circle as per given formula

# “The area of a circle with radius 10 is 314 meters square.”

print("The area of a circle with radius {} is {} meters square.".format(radius,int(area))) # printing the area and radius of the circle as per given format

"""Question 9


Write a program, which reads weights (lbs.) of N students into a list and convert these weights to 
kilograms in a separate list using Loop. N: No of students (Read input from user)

"""

N = int(input("Enter the Number of Students : ")) # Taking the user input from the user and storing the number of values in the value N
weight_in_lbs = [] # initializing the empty list weight_in_lbs which stores the weight in lbs
weight_in_kgs = [] # initializing the empty list weight_in_kgs which stores the weight in kgs

# running a for loop to take the N numbers of weights in lbs
for i in range(0,N):
  weight_in_lbs.append(float(input())) # Appending the weights in lbs to the weight_in_lbs list

# running a for loop to convert weights in lbs to weight in kgs
for weight in weight_in_lbs:
  weight_in_kgs.append(round(weight*0.4535923,2)) # converting the weight in lbs to weights in kgs and appending it to the list weight_in_kgs

print("The list after converting to kgs is : {}".format(weight_in_kgs))  # printing the list of weights in kgs

"""Question 10

The diagram below shows a dataset with 2 classes and 8 data points, each with only one feature 
value, labeled f. Note that there are two data points with the same feature value of 6. These are 
shown as two x’s one above the other. Provide stepwise mathematical solution, do not write 
code for it.
1. Divide this data equally into two parts. Use first part as training and second part as 
testing. Using KNN classifier, for K=3, what would be the predicted outputs for the test 
samples? Show how you arrived at your answer.
2. Compute the confusion matrix for this and calculate accuracy, sensitivity and specificity 
values

Solution
As per the given data, let’s assume that 0 represents a dot and 1 represents a cross.
So the data points would be (1, 0), (2, 1), (3, 1), (6, 1), (6, 1), (7, 0), (10, 0), (11, 0).
By dividing the dataset into equal parts randomly we get, 
The training set to be (2, 1), (6, 1), (7, 0), (11, 0).
The test set to be (1, 0), (3, 1), (6, 1), (10, 0).
Now by calculating the distances of each test point from each of the train set, we would get the following table.
Here we would consider 3 nearest points from the 4 training points and predict the y co-ordinate value of test data point with majority value in the y co-ordinate of the training points. 
As we see for the first test point, we have two 1’s and one 0 in the nearest 3 points of the training set, hence we predicted the y co-ordinate value of test point to be 1.
Similarly for the second test point, we have two 1’s and one 0 in the nearest 3 points of the training set, hence we predicted the y co-ordinate value of test point to be 1.
Similarly for the third test point, we have two 1’s and one 0 in the nearest 3 points of the training set, hence we predicted the y co-ordinate value of test point to be 1.
Similarly for the fourth test point, we have two 0’s and one 1 in the nearest 3 points of the training set, hence we predicted the y co-ordinate value of test point to be 0.


Train Set

Test Set
(2, 1)	(6, 1)	(7, 0)	(11, 0)	KNN classifier, for K=3
(predicted output)	Actual Output
(1, 0)	1.414	5.099	6.0	10	1	0
(3, 1)	1.0	3.1	5.099	9.055	1	1
(6, 1)	4.0	0.0	1.414	5.099	1	1
(10, 0)	8.06	4.123	3	4	0			0

( Note: The distances between the points is calculated by the Euclidean Formula 
The distance between the points (x1,y1) and (x2,y2) is distance = ((x1 - x2)^2 + (y1 - y2)^2)^0.5 )
 
2. Compute the confusion matrix for this and calculate accuracy, sensitivity and specificity values
Solution:
                                   

As per the above table, the confusion matrix is [1 1]
    [0 2]
	TP = 2
	TN = 1
	FP = 1
	FN = 0
Accuracy:
Accuracy = (TP+TN)/(P+N) = ¾ = 0.75 %
Sensitivity:
Sensitivity = TP/(TP+FN) = TP/P = 2/(2+0) = 100 %
Specificity:
Specificity = TN/(FP+TN) = TN/N = 1/(2) = 50 %
"""